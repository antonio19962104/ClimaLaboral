@using Newtonsoft.Json
@model ML.Result
@{
    ViewBag.Title = "Reportes | Clima Laboral";
    Layout = null;
}
<!DOCTYPE html>
<html lang="es-es" style="overflow-x:hidden;" ng-app="app">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="author" content="Grupo Autofin México" />
    <meta name="description" content="Reportes de la encuesta clima laboral" />
    <meta name="keywords" content="Grupo Autofin México, Reportes, Clima Laboral" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/bundles/cssAdmin")
    @Styles.Render("~/bundles/cssReporteoClima")
    <link href="~/css/reporteoClima.css" rel="stylesheet" />
    @{
        string NombreAdmin = Convert.ToString(Session["AdminLog"]);
        ViewBag.Perfil = Session["PerfilAdminLog"];
    }
    @Scripts.Render("~/bundles/jqueryAdmin")
    @Scripts.Render("~/bundles/jqueryReporteoClima")
    <script src="~/scripts/templates-functions.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqcloud/1.0.4/jqcloud.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.7.7/xlsx.core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xls/0.7.4-a/xls.core.min.js"></script>
    <script src="~/scripts/ReporteoClima/html2canvas.js"></script><!-- html2canvas 1.0.0-rc.7 -->
    @*<script src="~/scripts/TS/html2canvas.js"></script>*@<!-- html2canvas 1.3.2 -->
    <script src="http://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>
    <script src="~/scripts/ReporteoClima/jspdf.min.js"></script>
    <script type="text/javascript" src="https://raw.githack.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js"></script>
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2021.2.616/styles/kendo.default-v2.min.css" />
    @*<script src="https://kendo.cdn.telerik.com/2021.2.616/js/jquery.min.js"></script>*@
    <script src="https://kendo.cdn.telerik.com/2021.2.616/js/kendo.all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/2.4.0/jszip.min.js"></script>
    <script src="~/scripts/ReporteoClima/EscalarImagen.js"></script>
    <script>
        $(document).ready(function () {
            $(document).on("keydown", function (ev) {
                console.log(ev.keyCode);
                if (ev.keyCode === 27 || ev.keyCode === 122) return false
            })
        });
    </script>
    @{
        if (HttpContext.Current.IsDebuggingEnabled)
        {
            <script src="~/scripts/reporteoClimaLaboral_FromJob.js"></script>
        }
        else
        {
            <script src="~/scripts/reporteoClimaLaboral_FromJob.js"></script>
        }
    }

    <script>
        localStorage["AdminLog"] = @Html.Raw(JsonConvert.SerializeObject(Session["AdminLog"]));
        localStorage["ps"] = @Html.Raw(JsonConvert.SerializeObject(Session["ps"]));
        //nuevos
        localStorage["nameAdminLog"] = @Html.Raw(JsonConvert.SerializeObject(Session["AdminLog"]));
        localStorage["idAdminLog"] = @Html.Raw(JsonConvert.SerializeObject(Session["IdAdministradorLogeado"]));
    </script>
    <style>
        canvas {
            border: 0px none black;
        }

        .fondoNuevoGris {
            background-color: #2f343a !important;
        }

        .bodyVisible {
            opacity: 1;
        }

        .bodyInvisible {
            opacity: 1;
        }

        .screenshots {
            display: none;
        }

        .sidenav {
            list-style-type: none !important;
        }

        .w-icon-impulsores {
            width: 40px !important;
        }
    </style>
    <script>
        var b64Document = "";
    </script>
</head>
@{
    var usr = Convert.ToString(Session["AdminLog"]);
    if (Model.Correct == false)
    {
    <body>
        <main id="wrapper">
            <div id="top-bar">
                <div class="container-fluid px-lg-5">
                    <div class="row">
                        <div class="col-4 col-sm-5 col-md-5">
                            <img src="~/img/logo.png" class="logo-header" alt="Logo" onclick="">
                        </div>
                        <div style="display: none">
                            @RenderBody()
                        </div>

                        <div class="col-8 col-sm-7 col-md-7">
                            <div class="user-info">
                                <span class="color">Hola</span>
                                <img src="~/img/icon-user-male.jpg" class="avatar-header" width="50" height="50" alt="Avatar">
                            </div><!--.user-info-->
                        </div>
                    </div><!--.row-->
                </div><!--.container-fluid-->
            </div>
            <section id="content">
                <div class="content-wrap">
                    <div class="container-fluid px-lg-5">
                        <div class="row">
                            <div class="col-lg-8">
                                <div hidden class="col-md-6 col-sm-12 col-xs-6 col-6">
                                    <h2>Ooops ha ocurrido un error</h2>
                                </div>
                                <div class="col-md-6 col-sm-12 col-xs-6 col-6">
                                    <h2>Ooops ha ocurrido un error :(</h2>
                                    <p>Accede nuevamente</p>
                                    <p><a id="urlLogn" href="">Login de usuario</a></p>
                                </div>
                                <div class="col-md-6 col-sm-12 col-xs-6 col-6">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>
        <footer id="footer" style="bottom: 0; position: fixed;">
            <div class="container-fluid px-lg-5">
                <div class="row">
                    <div class="col-6">
                        <p class="copyrights"><span class="color">DIAGNOSTIC 4U</span> @DateTime.Now.Year</p>
                    </div>
                    <div class="col-6">
                        <p class="text-support"><i class="far fa-life-ring"></i> SOPORTE</p>
                    </div>
                </div>
            </div>
        </footer>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>
        @*<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>*@
        <script src="http://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            var redirect = "http://" + window.location.href.split('/')[2] + "/LoginAdmin/Login";
            try {
                var elem = document.getElementById("urlLogn").href = redirect;
            } catch (e) {

            }
            swal.fire("No fué posible validar el token, serás redireccionado al Login", "", "info").then(function () {
                var elem = document.getElementById("urlLogn").click();
            });
        </script>
    </body>
    }
    if (!String.IsNullOrEmpty(usr) && Model.Correct == true)
    {
    <body @*ng-app="app"*@ ng-controller="reporteController as vm" ng-class="{ bodyVisible: !vm.isBusy, bodyInvisible: vm.isBusy }">
        <ul id="mySidenav" class="sidenav">
            <a href="javascript:void(0)" class="closebtn d-none" onclick="closeNav()"><i class="fas fa-arrow-left fa-lg color"></i></a>
            <span class="openbtn animated pulse slow" onclick="openNav()"><i class="fas fa-arrow-right fa-lg color"></i></span>


            <!--Seccion Permisos por usuario-->
            @{
                //Validar permisos
                var ActionEncuestasListar = false;
                var ActionEncuestasCrear = false;
                var ActionEncuestasOpc = false;

                var ActionPlantillasListar = false;
                var ActionPlantillasCrear = false;
                var ActionPlantillasOpc = false;

                var ActionReportesListar = false;
                var ActionReportesCrear = false;
                var ActionReportesOpc = false;

                var ActionBDListar = false;
                var ActionBDCrear = false;
                var ActionBDOpc = false;

                var ActionUsuariosListar = false;
                var ActionUsuariosCrear = false;
                var ActionUsuariosOpc = false;

                var ActionEmpresasListar = false;
                var ActionEmpresasCrear = false;
                var chkEmpresasOpc = false;

                var chkPlanesListar = false;
                var chkPlanesCrear = false;
                var chkAdminAcciones = false;

                var session = Session["AdminLog"];
                var sessionPerfil = Session["PerfilAdminLog"];


                ViewBag.Permisos = Session["Permisos"];
                ViewBag.Modulos = Session["Modulos"];
                //Model.ObjectsPermisos = new List<object>();
                //Model.ObjectsPermisos = ViewBag.Permisos;

                foreach (ML.PerfilModulo item in ViewBag.Permisos)
                {
                    if (item.Modulo.Nombre == "Encuestas" && item.PerfilModuloAccion.Accion == "ListarEncuesta")
                    {
                        ActionEncuestasListar = true;
                    }
                    if (item.Modulo.Nombre == "Encuestas" && item.PerfilModuloAccion.Accion == "CrearEncuesta")
                    {
                        ActionEncuestasCrear = true;
                    }
                    if (item.Modulo.Nombre == "Encuestas" && item.PerfilModuloAccion.Accion == "OpcEncuesta")
                    {
                        ActionEncuestasOpc = true;
                    }
                    /**********************/
                    if (item.Modulo.Nombre == "Plantillas" && item.PerfilModuloAccion.Accion == "ListarPlantilla")
                    {
                        ActionPlantillasListar = true;
                    }
                    if (item.Modulo.Nombre == "Plantillas" && item.PerfilModuloAccion.Accion == "CrearPlantilla")
                    {
                        ActionPlantillasCrear = true;
                    }
                    if (item.Modulo.Nombre == "Plantillas" && item.PerfilModuloAccion.Accion == "OpcPlantilla")
                    {
                        ActionPlantillasOpc = true;
                    }
                    /***********************************/
                    if (item.Modulo.Nombre == "Reportes" && item.PerfilModuloAccion.Accion == "ListarReporte")
                    {
                        ActionReportesListar = true;
                    }
                    if (item.Modulo.Nombre == "Reportes" && item.PerfilModuloAccion.Accion == "CrearReporte")
                    {
                        ActionReportesCrear = true;
                    }
                    if (item.Modulo.Nombre == "Reportes" && item.PerfilModuloAccion.Accion == "OpcReporte")
                    {
                        ActionReportesOpc = true;
                    }
                    /***************************************/
                    if (item.Modulo.Nombre == "Base de datos" && item.PerfilModuloAccion.Accion == "ListarBD")
                    {
                        ActionBDListar = true;
                    }
                    if (item.Modulo.Nombre == "Base de datos" && item.PerfilModuloAccion.Accion == "CrearBD")
                    {
                        ActionBDCrear = true;
                    }
                    if (item.Modulo.Nombre == "Base de datos" && item.PerfilModuloAccion.Accion == "OpcBD")
                    {
                        ActionBDOpc = true;
                    }
                    /*******************************/
                    if (item.Modulo.Nombre == "Usuarios" && item.PerfilModuloAccion.Accion == "ListarUsuario")
                    {
                        ActionUsuariosListar = true;
                    }
                    if (item.Modulo.Nombre == "Usuarios" && item.PerfilModuloAccion.Accion == "CrearUsuario")
                    {
                        ActionUsuariosCrear = true;
                    }
                    if (item.Modulo.Nombre == "Usuarios" && item.PerfilModuloAccion.Accion == "OpcUsuario")
                    {
                        ActionUsuariosOpc = true;
                    }
                    /*********************************/
                    if (item.Modulo.Nombre == "Empresas" && item.PerfilModuloAccion.Accion == "ListarEmpresa")
                    {
                        ActionEmpresasListar = true;
                    }
                    if (item.Modulo.Nombre == "Empresas" && item.PerfilModuloAccion.Accion == "CrearEmpresa")
                    {
                        ActionEmpresasCrear = true;
                    }
                    if (item.Modulo.Nombre == "Empresas" && item.PerfilModuloAccion.Accion == "OpcEmpresa")
                    {
                        chkEmpresasOpc = true;
                    }
                    if (item.Modulo.Nombre == "Planes de Acción" && item.PerfilModuloAccion.Accion == "ListarPlanes")
                    {
                        <script>
                            localStorage.setItem("ListarPlanes", true)
                        </script>
                        chkPlanesListar = true;
                    }
                    if (item.Modulo.Nombre == "Planes de Acción" && item.PerfilModuloAccion.Accion == "CrearPlanes")
                    {
                        <script>
                            localStorage.setItem("CrearPlanes", true)
                        </script>
                        chkPlanesCrear = true;
                    }
                    if (item.Modulo.Nombre == "Planes de Acción" && item.PerfilModuloAccion.Accion == "AdministrarAcciones")
                    {
                        <script>
                            localStorage.setItem("AdministrarAcciones", true)
                        </script>
                        chkAdminAcciones = true;
                    }
                }

                foreach (ML.PerfilModulo perf in ViewBag.Modulos)
                {
                    ML.PerfilModulo perfilModulo = new ML.PerfilModulo();
                    perfilModulo.Modulo = new ML.Modulo();

                    perfilModulo.Modulo.Nombre = perf.Modulo.Nombre;

                    if (perfilModulo.Modulo.Nombre == "Encuestas")
                    {
                        <li id="Encuestas">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapseSurvey" aria-controls="collapseSurvey" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-survey.png" alt="Icono Encuestas" class="img-white">
                                    <span class="tooltiptext">Encuestas</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapseSurvey" role="button" aria-expanded="false" aria-controls="collapseSurvey">
                                    <img src="~/img/icon-survey.png" class="img-white pr-3" alt="Icono Encuestas"> Encuestas
                                </a>
                            </span>
                            <div class="collapse" id="collapseSurvey">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (ActionEncuestasCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Create", "Encuesta")">Crear</a></li>
                                            }
                                            if (ActionEncuestasOpc == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Load", "Encuesta")">Importar encuesta</a></li>
                                            }
                                            if (ActionEncuestasListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll", "Encuesta")">Listado</a></li>
                                            }
                                            <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("CreateCL", "Encuesta")">Crear Clima Laboral</a></li>
                                            <li style="margin-left: 20px;"><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll", "Competencia")">Competencias</a></li>
                                            <li style="margin-left: 20px;"><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll_", "Competencia")">Categorias</a></li>
                                            <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Index", "PlanesDeAccion")">Crear Plan de Acción</a></li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                    if (perfilModulo.Modulo.Nombre == "Plantillas")
                    {
                        <li id="Plantillas">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapseTemplates" aria-controls="collapseTemplates" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-template.png" alt="Icono Plantillas" class="img-white">
                                    <span class="tooltiptext">Plantillas</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapseTemplates" role="button" aria-expanded="false" aria-controls="collapseTemplates">
                                    <img src="~/img/icon-template.png" class="img-white pr-3" alt="Icono Plantillas"> Plantillas
                                </a>
                            </span>
                            <div class="collapse" id="collapseTemplates">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (ActionPlantillasCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("creaPlantilla", "Plantillas")">Crear</a></li>
                                            }
                                            if (ActionPlantillasListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Plantillas", "Plantillas")">Listado</a></li>
                                            }
                                            if (ActionPlantillasOpc == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="#">Más opciones</a></li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                    if (perfilModulo.Modulo.Nombre == "Reportes")
                    {
                        <li id="Reportes">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapseReports" aria-controls="collapseReports" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-reports.png" alt="Icono Reportes" class="img-white">
                                    <span class="tooltiptext">Reportes</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapseReports" role="button" aria-expanded="false" aria-controls="collapseReports">
                                    <img src="~/img/icon-reports.png" class="img-white pr-3" alt="Icono Reportes"> Reportes
                                </a>
                            </span>
                            <div class="collapse" id="collapseReports">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (ActionReportesCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Add", "ReporteD4U")">Crear</a></li>
                                            }
                                            if (ActionReportesListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll", "Reporte")">Listado</a></li>
                                            }
                                            if (ActionReportesOpc == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="#">Más opciones</a></li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                    if (perfilModulo.Modulo.Nombre == "Base de datos")
                    {
                        <li id="BD">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapseDatabase" aria-controls="collapseDatabase" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-database.png" alt="Icono Bases de datos" class="img-white">
                                    <span class="tooltiptext">Bases de datos</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapseDatabase" role="button" aria-expanded="false" aria-controls="collapseDatabase">
                                    <img src="~/img/icon-database.png" class="img-white pr-3" alt="Icono Bases de datos"> Bases de datos
                                </a>
                            </span>
                            <div class="collapse" id="collapseDatabase">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (ActionBDCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Add", "BD")">Crear</a></li>
                                            }
                                            if (ActionBDListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAllForListado", "BD")">Listado</a></li>
                                            }
                                            if (ActionBDOpc == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetEliminadas", "BD")">Administrar bases de datos eliminadas</a></li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                    if (perfilModulo.Modulo.Nombre == "Usuarios")
                    {
                        <li id="Usuarios">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapseUsers" aria-controls="collapseUsers" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-users.png" alt="Icono Usuarios" class="img-white">
                                    <span class="tooltiptext">Usuarios</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapseUsers" role="button" aria-expanded="false" aria-controls="collapseUsers">
                                    <img src="~/img/icon-users.png" class="img-white pr-3" alt="Icono Usuarios"> Usuarios
                                </a>
                            </span>
                            <div class="collapse" id="collapseUsers">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (ActionUsuariosCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Add", "Administrador")">Crear</a></li>
                                            }
                                            if (ActionUsuariosListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll", "Administrador")">Listado</a></li>
                                            }
                                            if (ActionUsuariosOpc == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAllEliminados", "Administrador")">Administrar usuarios eliminadas</a></li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                    if (perfilModulo.Modulo.Nombre == "Empresas")
                    {
                        <li id="Empresas">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapseEnterprises" aria-controls="collapseEnterprises" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-enterprises.png" alt="Icono Empresas" class="img-white">
                                    <span class="tooltiptext">Empresas</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapseEnterprises" role="button" aria-expanded="false" aria-controls="collapseEnterprises">
                                    <img src="~/img/icon-enterprises.png" class="img-white pr-3" alt="Icono Empresas"> Empresas
                                </a>
                            </span>
                            <div class="collapse" id="collapseEnterprises">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (ActionEmpresasCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Add", "Empresa")">Crear</a></li>
                                            }
                                            if (ActionEmpresasListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll", "Empresa")">Listado</a></li>
                                            }
                                            if (chkEmpresasOpc == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAllEliminadas", "Empresa")">Administrar empresas eliminadas</a></li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                    if (perfilModulo.Modulo.Nombre == "Planes de Acción")
                    {
                        <li id="Planes">
                            <a onclick="openNav(this)" data-toggle="collapse" href="#collapsePlanes" aria-controls="collapsePlanes" style="padding: 0px;">
                                <div class="item-menu-icon">
                                    <img src="~/img/icon-plan-action.png" alt="Icono Encuestas" class="img-white">
                                    <span class="tooltiptext">Planes de Acción</span>
                                </div>
                            </a>
                            <span class="item-menu d-none">
                                <a onclick="openNav(this)" data-toggle="collapse" href="#collapsePlanes" role="button" aria-expanded="false" aria-controls="collapsePlanes">
                                    <img src="~/img/icon-plan-action(1).png" class="img-white pr-3" alt="Icono Encuestas"> Planes de Acción
                                </a>
                            </span>
                            <div class="collapse" id="collapsePlanes">
                                <div class="card card-body py-2">
                                    <ul class="fa-ul pl-lg-4">
                                        @{
                                            if (chkPlanesListar == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetAll", "PlanesDeAccion")">Listado</a></li>
                                            }
                                            if (chkPlanesCrear == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("Create", "PlanesDeAccion")">Crear</a></li>
                                            }
                                            if (chkAdminAcciones == true)
                                            {
                                                <li><span class="fa-li"><i class="fas fa-minus"></i></span> <a href="@Url.Action("GetEncuestas", "PlanesDeAccion")">Administrar acciones</a></li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </li>
                    }
                }
            }
            <!--Fin seccion permisos por usuario-->



        </ul>
        <div id="main" style="margin-left: 50px;">
            <main id="wrapper">
                <div id="top-bar">
                    <div class="container-fluid px-lg-5">
                        <div class="row">

                            <div class="col-6 col-sm-4 col-md-5">
                                <img src="@Session["logo"]" class="logo-header" alt="Logo" onclick="GetDashBoard()">
                            </div>

                            <div class="col-6 col-sm-8 col-md-7">
                                <div class="user-info">
                                    <span class="color">Hola</span>, @NombreAdmin  @{ foreach (var item in ViewBag.Perfil)
                                        { <span class="position"> / @item  </span> } } <img src="~/img/icon-user-male.jpg" class="avatar-header" width="50" height="50" alt="Avatar">
                                </div>
                            </div>
                        </div><!--.row-->
                    </div><!--.container-fluid-->
                </div>
                <header id="header">
                    <nav class="navbar py-0 px-lg-5">
                        <a class="navbar-brand title-section-top" href="#">Escritorio</a>
                    </nav>
                </header>
                <section id="page-title">
                    <div class="container-fluid px-lg-5">
                        <div class="row">
                            <div class="col-sm-10 bottom-align-left center-vertically-xs">
                                <img class="img-fluid img-page-title" src="~/img/icon-reports.png" />
                                @*<h1 class="title-page-survey"> Reporte / <span>Reporte de Comentarios </span></h1>*@
                                <h1 class="title-page-survey">Bienvenido <span>Selecciona cualquiera de las herramientas para que comiences:</span></h1>
                            </div>
                            <div class="col-sm-2 bottom-align-right center-vertically-xs">
                                <a href="/Reporte/GetAll">Regresar al listado</a>
                            </div>
                        </div>
                    </div><!--.container-fluid-->
                </section>  
                <section @*ng-controller="reporteController as vm"*@ id="content" class="">
                    @RenderBody()

                    @*@Html.Partial("~/Views/ReporteoClima/EstructuraReporte/_GridFinalReporte.cshtml")*@
                    @Html.Partial("~/Views/ReporteoClima/Loading.cshtml")

                </section>
            </main>
        </div>
        <footer id="footer">
            <div class="container-fluid px-lg-5">
                <div class="row">
                    <div class="col-6">
                        <p class="copyrights"><span class="color">DIAGNOSTIC 4U</span> @DateTime.Now.Year</p>
                    </div>
                    <div class="col-6">
                        <p class="text-support"><i class="far fa-life-ring"></i> SOPORTE</p>
                    </div>
                </div>
            </div>
        </footer>
        <div style="display: none" id="mergeS"></div>
        <div id="cortesBarras" style="display: none;">
            <!-- Plantilla para los cortes de las barras de promedio por nivel -->
            <div class="content-wrap" style=" background-color: #fff">
                <div class="container-fluid px-lg-5" style="background-color: #fff">
                    <p class="mb-n1">Resultado General</p>
                    <h2 class="robotothin mb-2 mt-n1">INTERNAL LAYOUT => TABLA DE CLASIFICACIÓN POR ESTRUCTURA Enfoque Empresa (15. Resultados generales por estructura) <span class="robotobold yellow-clima area-empresa ml-3">{{vm.UNSeleccionada}}</span></h2>
                    <div class="card">
                        <div class="card-block">
                            <div class="px-4">
                                <div class="row mt-4">
                                    <div class="col-sm-12">
                                        <!---->
                                        <div id="mergeCortesBarras">
                                        </div>
                                    </div>
                                </div><!--.row-->
                                <div class="row mt-2">
                                    <div class="col-12">
                                        <center>
                                            <div class="col-4">
                                                <div class="row">
                                                    <div style="width: 25px;height: 25px;background: #2e348d;margin-top: 10px;float: left;"></div>
                                                    <div class="ml-2 mr-3" style="float: left;font-size: small;font-weight: bold;margin-top: 14px;">PROM GRAL ACTUAL</div>
                                                    <div style="width: 25px;height: 25px;background: #00abe9;margin-top: 10px;float: left;"></div>
                                                    <div style="float: left;font-size: small;font-weight: bold;margin-top: 14px;" class="ml-2 mr-3">HC</div>
                                                    <div ng-hide="!vm.hasHistorico" style="width: 25px;height: 25px;background: #fff;margin-top: 10px;float: left;border: solid 2px #45cc00;"></div>
                                                    <div ng-hide="!vm.hasHistorico" style="float: left;font-size: small;font-weight: bold;margin-top: 14px;" class="ml-2 mr-3">PROM GRAL ANTERIOR</div>
                                                </div>
                                            </div>
                                        </center>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-center mt-5">
                                    <div class="col-12 p-0 m-0">
                                        <img src="/img/ReporteoClima/indicadores.png" class="m-0 p-0" style="width:inherit;">
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <hr class="clearfix my-5">
                </div><!--.container-->

            </div><!--.content-wrap-->
        </div>
        <script>
            /*
                *
                *  A canvas to PDF converter. Uses a mock canvas context to build a PDF document.
                *
                *  Licensed under the MIT license:
                *  http://www.opensource.org/licenses/mit-license.php
                *
                *  Author:
                *  Joshua Gould
                *
                *  Copyright (c) 2017 Joshua Gould
            */

            (function (global) {
                'use strict';

                var canvas2pdf = (typeof canvas2pdf !== 'undefined') ? canvas2pdf : {};
                if (typeof module !== 'undefined' && module.exports) {
                    module.exports = canvas2pdf; // Node
                } else if (typeof define === 'function' && define.amd) {
                    define(function () { // AMD module
                        return canvas2pdf;
                    });
                } else {
                    global.canvas2pdf = canvas2pdf; // browser global
                }

                function hex(v) {
                    return v < 0x10
                        ? '0' + Math.max(0, v).toString(16)
                        : Math.min(255, v).toString(16);
                };

                function hslToHex(h, s, l, a) {
                    h = h % 360 + (h < 0) * 360;
                    s = isNaN(h) || isNaN(s) ? 0 : s;
                    var m2 = l + (l < 0.5 ? l : 1 - l) * s;
                    var m1 = 2 * l - m2;
                    return rgbToHex(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2),
                        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), a);
                };

                function hsl2rgb(h, m1, m2) {
                    return (h < 60 ? m1 + (m2 - m1) * h / 60
                        : h < 180 ? m2
                            : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
                                : m1) * 255;
                };
                var reI = '\\s*([+-]?\\d+)\\s*',
                    reN = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*',
                    reP = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*',
                    reRgbInteger = new RegExp('^rgb\\(' + [reI, reI, reI] + '\\)$'),
                    reRgbPercent = new RegExp('^rgb\\(' + [reP, reP, reP] + '\\)$'),
                    reRgbaInteger = new RegExp('^rgba\\(' + [reI, reI, reI, reN] + '\\)$'),
                    reRgbaPercent = new RegExp('^rgba\\(' + [reP, reP, reP, reN] + '\\)$'),
                    reHslPercent = new RegExp('^hsl\\(' + [reN, reP, reP] + '\\)$'),
                    reHslaPercent = new RegExp('^hsla\\(' + [reN, reP, reP, reN] + '\\)$');

                var rgbToHex = function (r, g, b, a) {
                    return { c: '#' + hex(r) + hex(g) + hex(b), a: a };
                };

                var fixColor = function (value) {
                    var m;
                    var format = (value + '').trim().toLowerCase();
                    if ((m = reRgbInteger.exec(format))) { // rgb(255, 0, 0)
                        return rgbToHex(m[1], m[2], m[3], 1);
                    } else if ((m = reRgbPercent.exec(format))) { // // rgb(100%, 0%, 0%)
                        return rgbToHex(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1);
                    } else if ((m = reRgbaInteger.exec(format))) { // // rgba(255, 0, 0, 0.5)
                        return rgbToHex(m[1], m[2], m[3], m[4]);
                    } else if ((m = reRgbaPercent.exec(format))) { // // rgb(100%, 0%, 0%, .2)
                        return rgbToHex(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]);
                    } else if ((m = reHslPercent.exec(format))) { // // hsl(120, 50%, 50%)
                        return hslToHex(m[1], m[2] / 100, m[3] / 100);
                    } else if ((m = reHslaPercent.exec(format))) {
                        return hslToHex(m[1], m[2] / 100, m[3] / 100, m[4]); // hsla(120, 50%, 50%, 1)
                    } else {
                        return { c: value, a: 1 };
                    }
                };

                canvas2pdf.PdfContext = function (stream, options) {
                    if (stream == null) {
                        throw new Error('Stream must be provided.');
                    }
                    var _this = this;
                    var doc = new PDFDocument(options);
                    this.stream = doc.pipe(stream);
                    this.doc = doc;

                    var fontValue = '10px Helvetica';
                    this.textAlign = 'left';
                    this.textBaseline = 'alphabetic';
                    var fontRegex = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\'\"\sa-z]+?)\s*$/i;
                    var defaultFontData = {
                        style: 'normal',
                        size: 10,
                        family: 'Helvetica',
                        weight: 'normal',
                    };
                    var parseFont = function () {
                        var fontPart = fontRegex.exec(_this.font);
                        if (fontPart === null) {
                            return defaultFontData;
                        }
                        var data = {
                            style: fontPart[1] || 'normal',
                            size: parseInt(fontPart[4]) || 10,
                            family: fontPart[6] || 'Helvetica',
                            weight: fontPart[3] || 'normal',
                        };
                        return data;
                    };

                    Object.defineProperty(this, 'fillStyle', {
                        get: function () { return _this.doc.fillColor(); },
                        set: function (value) {
                            var color = fixColor(value);
                            _this.doc.fillColor(color.c, color.a);
                        },
                    });
                    Object.defineProperty(this, 'strokeStyle', {
                        get: function () { return _this.doc.strokeColor(); },
                        set: function (value) {
                            var color = fixColor(value);
                            _this.doc.strokeColor(color.c, color.a);
                        },
                    });
                    Object.defineProperty(this, 'lineWidth', {
                        get: function () { return _this.doc.lineWidth(); },
                        set: function (value) { _this.doc.lineWidth(value); },
                    });

                    Object.defineProperty(this, 'lineCap', {
                        get: function () { return _this.doc.lineCap(); },
                        set: function (value) { _this.doc.lineCap(value); },
                    });
                    Object.defineProperty(this, 'lineJoin', {
                        get: function () { return _this.doc.lineJoin(); },
                        set: function (value) { _this.doc.lineJoin(value); },
                    });

                    Object.defineProperty(this, 'globalAlpha', {
                        get: function () { return _this.doc.opacity(); },
                        set: function (value) { (value >= 0.0 && value <= 1.0) && _this.doc.opacity(value); },
                    });

                    Object.defineProperty(this, 'font', {
                        get: function () { return fontValue; },
                        set: function (value) {
                            fontValue = value;
                            var parsedFont = parseFont(value);
                            _this.doc.fontSize(parsedFont.size);
                            _this.doc.font(parsedFont.family);
                            _this.lineHeight = this.doc.currentLineHeight(false);
                        },
                    });
                    _this.lineHeight = this.doc.currentLineHeight(false);
                    this.font = fontValue;
                    this.strokeStyle = 'rgb(0,0,0)';
                    this.fillStyle = 'rgb(0,0,0)';
                };
                canvas2pdf.PdfContext.prototype.end = function () {
                    this.doc.end();
                };

                canvas2pdf.PdfContext.prototype.save = function () {
                    this.doc.save();
                };

                canvas2pdf.PdfContext.prototype.restore = function () {
                    this.doc.restore();
                };

                canvas2pdf.PdfContext.prototype.scale = function (x, y) {
                    this.doc.scale(x, y);
                };

                canvas2pdf.PdfContext.prototype.rotate = function (angle) {
                    var degrees = (angle * 180 / Math.PI);
                    this.doc.rotate(degrees);
                };

                canvas2pdf.PdfContext.prototype.translate = function (x, y) {
                    this.doc.translate(x, y);
                };

                canvas2pdf.PdfContext.prototype.beginPath = function () {
                    // no-op
                };

                canvas2pdf.PdfContext.prototype.moveTo = function (x, y) {
                    this.doc.moveTo(x, y);
                };

                canvas2pdf.PdfContext.prototype.closePath = function () {
                    this.doc.closePath();
                };

                canvas2pdf.PdfContext.prototype.lineTo = function (x, y) {
                    this.doc.lineTo(x, y);
                };

                canvas2pdf.PdfContext.prototype.stroke = function () {
                    this.doc.stroke();
                };

                canvas2pdf.PdfContext.prototype.fill = function () {
                    this.doc.fill();
                };

                canvas2pdf.PdfContext.prototype.rect = function (x, y, width, height) {
                    this.doc.rect(x, y, width, height);
                };

                canvas2pdf.PdfContext.prototype.fillRect = function (x, y, width, height) {
                    this.doc.rect(x, y, width, height);
                    this.doc.fill();
                };

                canvas2pdf.PdfContext.prototype.strokeRect = function (x, y, width, height) {
                    this.doc.rect(x, y, width, height);
                    this.doc.stroke();
                };

                /**
                 * "Clears" a canvas by just drawing a white rectangle in the current group.
                 */
                canvas2pdf.PdfContext.prototype.clearRect = function (x, y, width, height) {
                    var oldFill = this.doc.fillColor();
                    this.doc.fillColor('white');
                    this.doc.rect(x, y, width, height);
                    this.doc.fill();
                    this.doc.fillColor(oldFill);
                };

                canvas2pdf.PdfContext.prototype.arc = function (x, y, r, a0, a1, ccw) {
                    var pi = Math.PI,
                        tau = 2 * pi,
                        epsilon = 1e-6,
                        tauEpsilon = tau - epsilon;
                    x = +x, y = +y, r = +r;
                    var dx = r * Math.cos(a0),
                        dy = r * Math.sin(a0),
                        x0 = x + dx,
                        y0 = y + dy,
                        cw = 1 ^ ccw,
                        da = ccw ? a0 - a1 : a1 - a0;

                    // Is the radius negative? Error.
                    if (r < 0) {
                        throw new Error('negative radius: ' + r);
                    }
                    var cmd = '';
                    // Is this path empty? Move to (x0,y0).

                    cmd += 'M' + x0 + ',' + y0;

                    // // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
                    // else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
                    //   cmd += 'L' + x0 + ',' + y0;
                    // }

                    // Is this arc empty? We’re done.
                    if (!r) {
                        return;
                    }

                    // Does the angle go the wrong way? Flip the direction.
                    if (da < 0) {
                        da = da % tau + tau;
                    }

                    // Is this a complete circle? Draw two arcs to complete the circle.
                    if (da > tauEpsilon) {
                        cmd += 'A' + r + ',' + r + ',0,1,' + cw + ',' + (x - dx) + ',' + (y - dy) + 'A' + r + ',' + r + ',0,1,' + cw +
                            ',' + x0 + ',' + y0;
                    }

                    // Is this arc non-empty? Draw an arc!
                    else if (da > epsilon) {
                        cmd += 'A' + r + ',' + r + ',0,' + (+(da >= pi)) + ',' + cw + ',' + (x + r * Math.cos(a1)) + ',' +
                            (y + r * Math.sin(a1));
                    }
                    this.doc.path(cmd);
                };

                canvas2pdf.PdfContext.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
                    this.doc.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
                };

                canvas2pdf.PdfContext.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
                    this.doc.quadraticCurveTo(cpx, cpy, x, y);
                };
                canvas2pdf.PdfContext.prototype.createLinearGradient = function (x1, y1, x2, y2) {
                    var gradient = this.doc.linearGradient(x1, y1, x2, y2);
                    gradient.addColorStop = function (offset, color) {
                        var fixedColor = fixColor(color);
                        gradient.stop(offset, fixedColor.c, fixedColor.a);
                    };
                    return gradient;
                };

                canvas2pdf.PdfContext.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {
                    var _this = this;
                    var gradient = this.doc.radialGradient(x0, y0, r0, x1, y1, r1);
                    gradient.addColorStop = function (offset, color) {
                        var fixedColor = fixColor(color);
                        gradient.stop(offset, fixedColor.c, fixedColor.a);
                    };
                    return gradient;
                };

                canvas2pdf.PdfContext.prototype.adjustTextX = function (text, x) {
                    if (this.textAlign !== 'start' || this.textAlign !== 'left') {
                        var width = this.doc.widthOfString(text);
                        if (this.textAlign === 'right' || this.textAlign === 'end') {
                            x -= width;
                        } else if (this.textAlign === 'center') {
                            x -= (width / 2);
                        }
                    }
                    return x;
                };

                canvas2pdf.PdfContext.prototype.adjustTextY = function (text, y) {
                    // baseline is top by default
                    var height = this.lineHeight;
                    if (this.textBaseline === 'bottom') {
                        y -= height;
                    } else if (this.textBaseline === 'middle') {
                        y -= (height / 2);
                    } else if (this.textBaseline === 'alphabetic') {
                        y -= (height / 2) + 1;
                    }
                    return y;
                };

                canvas2pdf.PdfContext.prototype.fillText = function (text, x, y) {
                    x = this.adjustTextX(text, x);
                    y = this.adjustTextY(text, y);
                    this.doc.text(text, x, y, {
                        lineBreak: false, stroke: false, fill: true,
                    });
                };

                canvas2pdf.PdfContext.prototype.strokeText = function (text, x, y) {
                    x = this.adjustTextX(text, x);
                    y = this.adjustTextY(text, y);
                    this.doc.text(text, x, y, { lineBreak: false, stroke: true, fill: false });
                };

                canvas2pdf.PdfContext.prototype.measureText = function (text) {
                    text = '' + text;
                    var width = this.doc.widthOfString(text);
                    var height = this.lineHeight;
                    return { width: width, height: height };
                };

                canvas2pdf.PdfContext.prototype.clip = function () {
                    this.doc.clip();
                };

                canvas2pdf.PdfContext.prototype.drawImage = function (image) {
                    var _this;
                    var args = Array.prototype.slice.call(arguments);
                    var image = args[0];
                    var dx, dy, dw, dh, sx = 0, sy = 0, sw, sh;
                    if (args.length === 3) {
                        dx = args[1];
                        dy = args[2];
                        sw = image.width;
                        sh = image.height;
                        dw = sw;
                        dh = sh;
                    } else if (args.length === 5) {
                        dx = args[1];
                        dy = args[2];
                        dw = args[3];
                        dh = args[4];
                        sw = image.width;
                        sh = image.height;
                    } else if (args.length === 9) {
                        sx = args[1];
                        sy = args[2];
                        sw = args[3];
                        sh = args[4];
                        dx = args[5];
                        dy = args[6];
                        dw = args[7];
                        dh = args[8];
                    } else {
                        throw new Error('Invalid number of arguments passed to drawImage: ' + arguments.length);
                    }

                    if (image.nodeName === 'IMG') {
                        var canvas = document.createElement('canvas');
                        canvas.width = image.width;
                        canvas.height = image.height;
                        canvas.getContext('2d').drawImage(image, 0, 0);
                        var dataURL = canvas.toDataURL('image/png');
                        this.doc.image(dataURL, dx, dy, { width: dw, height: dh });
                    } else {
                        this.doc.image(image, dx, dy, { width: dw, height: dh });
                    }
                };

                /**
                 * Not yet implemented
                 */
                canvas2pdf.PdfContext.prototype.setTransform = function () {
                    console.log('setTransform not implemented');
                };

                canvas2pdf.PdfContext.prototype.createPattern = function (image, repetition) {
                    console.log('createPattern not implemented');
                };

                canvas2pdf.PdfContext.prototype.setLineDash = function (dashArray) {
                    console.log('setLineDash not implemented');
                };

                canvas2pdf.PdfContext.prototype.drawFocusRing = function () {
                    console.log('drawFocusRing not implemented');
                };

                canvas2pdf.PdfContext.prototype.createImageData = function () {
                    console.log('drawFocusRing not implemented');
                };

                canvas2pdf.PdfContext.prototype.getImageData = function () {
                    console.log('getImageData not implemented');
                };

                canvas2pdf.PdfContext.prototype.putImageData = function () {
                    console.log('putImageData not implemented');
                };

                canvas2pdf.PdfContext.prototype.globalCompositeOperation = function () {
                    console.log('globalCompositeOperation not implemented');
                };

                canvas2pdf.PdfContext.prototype.arcTo = function (x1, y1, x2, y2, radius) {
                    console.log('arcTo not implemented');
                };

            })(typeof window !== 'undefined' ? window : this);




        </script>
    </body>
    }
    else if (String.IsNullOrEmpty(usr) && Model.Correct == true)
    {
        /* Pagina de error */
        <body>
            <main id="wrapper">
                <div id="top-bar">
                    <div class="container-fluid px-lg-5">
                        <div class="row">
                            <div class="col-4 col-sm-5 col-md-5">
                                <img src="~/img/logo.png" class="logo-header" alt="Logo" onclick="">
                            </div>
                            <div style="display: none">
                                @RenderBody()
                            </div>

                            <div class="col-8 col-sm-7 col-md-7">
                                <div class="user-info">
                                    <span class="color">Hola</span>
                                    <img src="~/img/icon-user-male.jpg" class="avatar-header" width="50" height="50" alt="Avatar">
                                </div><!--.user-info-->
                            </div>
                        </div><!--.row-->
                    </div><!--.container-fluid-->
                </div>
                <section id="content">
                    <div class="content-wrap">
                        <div class="container-fluid px-lg-5">
                            <div class="row">
                                <div class="col-lg-8">
                                    <div hidden class="col-md-6 col-sm-12 col-xs-6 col-6">
                                        <h2>Ooops ha ocurrido un error</h2>
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-xs-6 col-6">
                                        <h2>Ooops ha ocurrido un error :(</h2>
                                        <p>Accede nuevamente</p>
                                        <p><a id="urlLogn" href="">Login de usuario</a></p>
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-xs-6 col-6">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </main>
            <footer id="footer" style="bottom: 0; position: fixed;">
                <div class="container-fluid px-lg-5">
                    <div class="row">
                        <div class="col-6">
                            <p class="copyrights"><span class="color">DIAGNOSTIC 4U</span> @DateTime.Now.Year</p>
                        </div>
                        <div class="col-6">
                            <p class="text-support"><i class="far fa-life-ring"></i> SOPORTE</p>
                        </div>
                    </div>
                </div>
            </footer>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css">
            <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>
            @*<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>*@
            <script src="http://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script>
                var getParamByUrl = function (key) {
                    try {
                        var url_string = window.location.href;
                        var url = new URL(url_string);
                        var param = url.searchParams.get(key);
                        console.log(param);
                        return param;
                    } catch (aE) {
                        return "";
                    }
                }
                var redirect = "http://" + window.location.href.split('/')[2] + "/LoginAdmin/Login";
                try {
                    var elem = document.getElementById("urlLogn").href = redirect;
                } catch (e) {

                }
                var paramValue = getParamByUrl("auth");
                if (paramValue != null && paramValue != "") {
                    // viene activado para token
                    Swal.fire({
                        title: 'Si tienes un token para visualizar un reporte ingresalo',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Aceptar',
                        cancelButtonText: 'Ir al Login',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            return fetch(`//api.github.com/users/${login}`)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error(response.statusText)
                                    }
                                    return response.json()
                                })
                                .catch(error => {
                                    Swal.showValidationMessage(
                                        `Request failed: ${error}`
                                    )
                                })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: `${result.value.login}'s avatar`,
                                imageUrl: result.value.avatar_url
                            });
                        }
                        else {
                            var elem = document.getElementById("urlLogn").click();
                        }
                    });
                }
                else {
                    swal.fire("Tu sesión ha expirado, serás redireccionado al Login", "", "info").then(function () {
                        var elem = document.getElementById("urlLogn").click();
                    });
                }
            </script>
        </body>
    }
}
</html>
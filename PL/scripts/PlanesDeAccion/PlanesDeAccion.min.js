var model = { AnioAplicacion: AnioAplicacion, AreaAgencia: "AUT - ELE - AEP", IdBaseDeDatos: IdBaseDeDatos, IdEncuesta: IdEncuesta, IdPregunta: 0 }, modelNuevaAccion = { Descripcion: "", PlanDeAccion: { IdPlanDeAccion: 0 }, Rango: { IdRango: 0 }, Estatus: { IdEstatus: 1 }, Categoria: { IdCategoria: 0 } }; !function () { "use strict"; angular.module("app", []).controller("planAccionController", function (e, a) { try { var t = this; function o(e) { return 200 != e.status && (404 != e.status ? (alert(e.statusText), !0) : void alert("404 - Recurso no encontrado")) } t.Modulo = "Configuración de Acciones de Mejora", t.PlanDeAccion = Object, t.EstructuraAFM = [], t.PlanDeAccion.Id = 0, t.PromedioSubCategorias = [], t.CategoriasAgrupadas = [], t.Categorias = [], t.ListRangos = [], $(document).ready(function () { t.get("/PlanesDeAccion/GetAreasForPlanAccion/?IdBaseDeDatos=" + IdBaseDeDatos, function (e) { if (e.Correct) { [].forEach.call(e.Objects[0], function (e) { t.EstructuraAFM.push({ type: e.substring(0, 6), value: e.substring(6, e.length) }) }), console.log(t.EstructuraAFM); var a = t.GenerarArbol(), o = new TreeView(a, { showAlwaysCheckBox: !0, fold: !1 }); document.getElementById("tree-view").appendChild(o.root), $("#tree-view p.group").css("display", "none"), $("#tree-view p.group:first").css("display", "") } else swal("Ocurrió un error al consultar las áreas", e.ErrorMessage, "error") }), document.getElementById("accordion").classList.add("ng-hide") }), t.GenerarArbol = function () { var e, a, o, r, n, c = []; return [].forEach.call(t.EstructuraAFM, function (c) { switch ("UNeg=>" == c.type && (e = "UNEG_" + c.value + t.getUid()), "Comp=>" == c.type && (a = "Comp_" + c.value + t.getUid()), "Area=>" == c.type && (o = "Area_" + c.value + t.getUid()), "Dpto=>" == c.type && (r = "Depto_" + c.value + t.getUid()), "SubD=>" == c.type && (n = "Subd_" + c.value + t.getUid()), c.type) { case "UNeg=>": c.IdUnidadNegocio = e; break; case "Comp=>": c.IdUnidadNegocio = e, c.CompanyId = a; break; case "Area=>": c.IdUnidadNegocio = e, c.CompanyId = a, c.IdArea = o; break; case "Dpto=>": c.IdUnidadNegocio = e, c.CompanyId = a, c.IdArea = o, c.IdDepartamento = r; break; case "SubD=>": c.IdUnidadNegocio = e, c.CompanyId = a, c.IdArea = o, c.IdDepartamento = r, c.IdSubdepartamento = n } }), console.log(t.EstructuraAFM), [].forEach.call(t.EstructuraAFM, function (e, a) { c.push({ text: e.value, checked: !1, id: a, children: [] }); var o = Enumerable.from(t.EstructuraAFM).where(a => "Comp=>" == a.type && a.IdUnidadNegocio == e.IdUnidadNegocio).toList();[].forEach.call(o, function (e, o) { c[a].children.push({ text: e.value, checked: !1, id: 0, children: [] }); var r = Enumerable.from(t.EstructuraAFM).where(a => "Area=>" == a.type && a.CompanyId == e.CompanyId).toList();[].forEach.call(r, function (e) { c[a].children[o].children.push({ text: e.value, checked: !1, id: 0, children: [] }) }) }) }), c }, t.getUid = function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var a = 16 * Math.random() | 0, t = "x" == e ? a : 3 & a | 8; return t.toString(16) }) }, t.get = function (a, t, r) { e.get(a, { headers: { "Cache-Control": "no-cache" } }).then(function (e) { try { if (o(e)) return; t(e.data) } catch (e) { o(e) } }, function (e) { o(e) }).finally(function () { }) }, t.post = function (a, t, r, n) { e.post(a, t).then(function (e) { try { if (o(e)) return; r(e.data) } catch (e) { o(e) } }, function (e) { o(e) }).finally(function () { }) }, t.post("/PlanesDeAccion/GetPromediosSubCategorias/", model, function (e) { console.log(e), e.Correct ? (t.PromedioSubCategorias = JSON.parse(e.Objects[0].JsonData), t.CategoriasAgrupadas = t.AgruparCategorias(t.PromedioSubCategorias), t.Categorias = t.Execute(t.CategoriasAgrupadas), console.log(t.Categorias), t.ObtenerRangos()) : swal(e.ErrorMessage, "", "error") }), t.ObtenerRangos = function () { t.get("/PlanesDeAccion/GetRangos/", function (e) { e.Correct ? ([].forEach.call(e.Objects, function (e) { t.ListRangos.push({ Id: e.IdRango, Descripcion: e.Descripcion }) }), t.ListRangos.unshift({ Id: 0, Descripcion: "- Asignar rango -" }), console.log(t.ListRangos), setTimeout(function () { [].forEach.call(t.ListRangos, function (e) { $(".select-rango").append("<option value='" + e.Id + "'>" + e.Descripcion + "</option>") }), $(".delete-accion").click(function (e) { t.EliminarAccion(e) }) }, 500)) : swal("Ocurrió un error al consultar los rangos", e.ErrorMessage, "error") }) }, t.AgruparCategorias = function (e) { var a = Enumerable.from(e).distinct(e => e.IdPadre).toList(); return [].forEach.call(a, function (a) { var o = Enumerable.from(e).where(e => e.IdPadre == a.IdPadre).toList(); t.CategoriasAgrupadas.push(o) }), t.CategoriasAgrupadas }, t.Execute = function (e) { var a = Array(); return [].forEach.call(e, function (e) { var t = 0;[].forEach.call(e, function (e) { t += e.Promedio }), a.push({ IdCategoria: e[0].IdPadre, Categoria: e[0].NombrePadreCategoria, PromedioGeneral: t / e.length }) }), a }, t.GuardarPlanDeAccion = function () { t.get("/PlanesDeAccion/AddPlan/?Nombre=" + document.getElementById("NombrePlanAccion").value, function (e) { e.Correct ? (t.PlanDeAccion.Id = e.NewId, swal("El plan de acción se agregó correctamente", "", "success").then(function () { document.getElementById("accordion").classList.remove("ng-hide") })) : swal("Ocurrión un error al intentar guardar el plan de acción", e.ErrorMessage, "success") }) }, t.AgregarNuevaAccion = function (e) { $("#merge-new-acciones-idcat-" + e).append(NuevaAccionHtmlContent), [].forEach.call($("#merge-new-acciones-idcat-" + e + " .select-rango"), function (e) { 0 == e.options.length && [].forEach.call(t.ListRangos, function (a) { e.options.add(new Option(a.Descripcion, a.Id, !1, !1)) }) }), $(".delete-accion").click(function (e) { t.EliminarAccion(e) }) }, t.GuardarAccion = function (e) { var a = e.target.closest(".form-group").getElementsByTagName("input")[0].value, o = e.target.closest(".form-group").getElementsByTagName("select")[0].value, r = e.target.closest(".card").id.split("-")[2]; if (IsNullOrEmpty(a) || "0" == o) return swal("Debes describir la acción de mejora y asignarle un rango", "", "info").then(function () { return !1 }), SetCampoInvalido(e.target.closest(".form-group").getElementsByTagName("input")[0]), SetCampoInvalido(e.target.closest(".form-group").getElementsByTagName("select")[0]), !1; SetCampoValido(e.target.closest(".form-group").getElementsByTagName("input")[0]), SetCampoValido(e.target.closest(".form-group").getElementsByTagName("select")[0]), model.IdCategoria = e.target.closest(".card-body").attributes.idCategoria.value, model.NuevaAccion = a, model.RangoAsignado = o, model.IdCategoria = r, t.post("/PlanesDeAccion/AddAccion/", model, function (a) { a.Correct ? (e.target.closest(".form-group").getElementsByClassName("fas fa-save")[0].style.color = "#28a745", e.target.closest(".form-group").setAttribute("IdAccion", a.NewId), swal("La acción ha sido agregada con exito", "", "success")) : swal("Ocurrió un error al intentar guardar la acción", a.ErrorMessage, "error") }) }, t.EliminarAccion = function (e) { var a = e.target.closest(".form-group"); null == a.attributes.IdAccion ? swal({ title: "¿Estás seguro de que deseas eliminar la acción de mejora?", text: "", icon: "info", buttons: ["No", "Si"], dangerMode: !1, allowOutsideClick: !1, closeOnClickOutside: !1 }).then(function (a) { a && e.target.closest(".form-group").remove() }) : a.attributes.IdAccion.value > 0 && t.get("/PlanesDeAccion/DeleteAccion/?IdAccion=" + a.attributes.IdAccion.value, function (e) { }) } } catch (e) { alert(e.message) } }) }(); var NuevaAccionHtmlContent = '<div class="form-group">\n        <div class="form-inline">\n            <div class="col-8">\n                <input type="text" class="form-control" style="width: 100%;" placeholder="Acción de mejora" />\n            </div>\n            <div class="col-3">\n                <select class="form-control select-rango" style="width: 100%;"></select>\n            </div>\n            <div class="col-1">\n                <button class="btn delete-accion"><i class="fas fa-remove"></i></button>\n                <button class="btn save-action" onclick="GuardarAccion(this)"><i class="fas fa-save"></i></button>\n            </div>\n        </div>\n    </div>', GuardarAccion = function (e) { var a = e.closest(".form-group").getElementsByTagName("input")[0].value, t = e.closest(".form-group").getElementsByTagName("select")[0].value; if (IsNullOrEmpty(a) || "0" == t) return swal("Debes describir la acción de mejora y asignarle un rango", "", "info").then(function () { return !1 }), SetCampoInvalido(e.closest(".form-group").getElementsByTagName("input")[0]), SetCampoInvalido(e.closest(".form-group").getElementsByTagName("select")[0]), !1; SetCampoValido(e.closest(".form-group").getElementsByTagName("input")[0]), SetCampoValido(e.closest(".form-group").getElementsByTagName("select")[0]), model.IdCategoria = e.closest(".card-body").attributes.idCategoria.value, model.NuevaAccion = a, model.RangoAsignado = t, mode.IdCategoria = "", $.ajax({ url: "/PlanesDeAccion/AddAccion/", type: "POST", data: model, success: function (a) { a.Correct ? (e.closest(".form-group").getElementsByClassName("fas fa-save")[0].style.color = "#28a745", e.closest(".form-group").setAttribute("IdAccion", a.NewId), swal("La acción ha sido agregada con exito", "", "success")) : swal("Ocurrió un error al intentar guardar la acción", a.ErrorMessage, "error") }, error: function (e) { 404 == e.status ? alert("404 - Recurso no encontrado") : alert(e.status) } }) }, IsNullOrEmpty = function (e) { var a = !1; switch (null != e && null != e || (a = !0), typeof e) { case "string": "" == e && (a = !0); break; case "object": 0 == e.length && (a = !0) }return a }, SetCampoInvalido = function (e) { e.classList.remove("is-valid"), e.classList.add("is-invalid") }, SetCampoValido = function (e) { e.classList.remove("is-invalid"), e.classList.add("is-valid") }, BuscaAcciones = function (e) { $("*:contains(" + e + ")").each(function () { $(this).children().length < 1 && $(this).css("border", "solid 2px red") }) }, CrearScript = function (e) { var a = document.createElement("script"); a.src = e, document.head.appendChild(a) }, CrearGridSubCategorias = function () { $("#grid").kendoGrid({ dataSource: DataSubCategorias, columnMenu: { filterable: !1 }, height: 680, editable: "incell", pageable: !0, sortable: !0, navigatable: !0, resizable: !0, reorderable: !0, groupable: !0, filterable: !0, toolbar: ["excel", "pdf", "search"], columns: [{ field: "IdCategoria", title: "IdCategoria", width: 300 }, { field: "Nombre", title: "Nombre", width: 130 }, { field: "IdPadre", title: "IdPadre", width: 125 }, { field: "NombrePadreCategoria", title: "NombrePadreCategoria", width: 125 }, { field: "Promedio", title: "Promedio", width: 140 }], batch: !0, pageSize: 20, autoSync: !0, schema: { model: { id: "IdCategoria", fields: { IdCategoria: { editable: !1, nullable: !0 }, Nombre: { type: "", editable: !1 }, IdPadre: { type: "number", editable: !1 }, Promedio: { type: "" } } } } }) };
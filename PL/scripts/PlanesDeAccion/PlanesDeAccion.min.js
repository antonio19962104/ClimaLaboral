var AccionesPreGuardadas = [], IdAccion_ReAsignar = 0, listRangos = [], model = { AnioAplicacion: AnioAplicacion, AreaAgencia: "AUT - ELE - AEP", IdBaseDeDatos: IdBaseDeDatos, IdEncuesta: IdEncuesta, IdPregunta: 0 }, modelNuevaAccion = { Descripcion: "", Rango: { IdRango: 0 }, Estatus: { IdEstatus: 1 }, Categoria: { IdCategoria: 0 }, Encuesta: { IdEncuesta: IdEncuesta }, BasesDeDatos: { IdBaseDeDatos: IdBaseDeDatos }, AnioAplicacion: AnioAplicacion }; !function () { "use strict"; angular.module("app", []).controller("planAccionController", function (e, a) { try { var o = this; function t(e) { var a; switch (e.status) { case 200: return !1; case 400: alert("400 - Bad Request"), a = !0; break; case 401: alert("401 - Unauthorized"), a = !0; break; case 403: alert("403 - Forbidden"), a = !0; break; case 404: alert("404 - Not Found"), a = !0; break; case 408: alert("408 - Request TimeOut"), a = !0; break; case 500: alert("500 - Internal Server Error"), a = !0; break; case 502: alert("502 - Bad Gateway"), a = !0; break; case 503: alert("503 - Service Unavailable"), a = !0; break; default: alert(e.message), a = !0 }return a && ($("#mergeError").append(e.data), $(".divError").show(), $("#formular").modal("toggle")), a } o.Modulo = "Configuración de Acciones de Mejora", 0 == IdEncuesta && (o.Modulo = "Configuración de Acciones de ayuda para el usuario"), o.solIcono = "/img/ReporteoClima/Iconos/sol-icono.png", o.solNubeIcono = "/img/ReporteoClima/Iconos/solnube-icono.png", o.nubeIcono = "/img/ReporteoClima/Iconos/nube-icono.png", o.lluviaIcono = "/img/ReporteoClima/Iconos/lluvia-icono.png", o.PlanDeAccion = Object, o.EstructuraAFM = [], o.PlanDeAccion.Id = 0, o.PromedioSubCategorias = [], o.CategoriasAgrupadas = [], o.Categorias = [], o.ListRangos = [], o.BusquedaAcciones = [], $(document).ready(function () { CrearScript("http://demo.climalaboral.divisionautomotriz.com/scripts/kendo-all.js"), $(".filter").on("keyup", function (e) { document.getElementById("mergeBusqueda").innerHTML = ""; var a = e.target.value, o = a.toUpperCase(), t = $("#merge-acciones-ayuda span");[].forEach.call(t, function (e) { var a = e.innerText; a = a.toUpperCase(); var t = !1; t = a.includes(o), "" != o && 1 == t && (document.getElementById("mergeBusqueda").innerHTML += "<div class='alert alert-primary'>" + a + " <small>Categoria 1</small></div>") }) }), o.ConsultaAccionesGuardadas(), o.ConsultaAccionesAyuda() }), o.ConsultaAreas = function () { o.get("/PlanesDeAccion/GetAreasForPlanAccion/?IdBaseDeDatos=" + IdBaseDeDatos, function (e) { if (e.Correct) { [].forEach.call(e.Objects[0], function (e) { o.EstructuraAFM.push({ type: e.substring(0, 6), value: e.substring(6, e.length) }) }); var a = o.GenerarArbol(), t = new TreeView(a, { showAlwaysCheckBox: !0, fold: !1 }); document.getElementById("tree-view").appendChild(t.root), $("#tree-view p.group").css("display", "none"), $("#tree-view p.group:first").css("display", "") } else swal("Ocurrió un error al consultar las áreas", e.ErrorMessage, "error") }), document.getElementById("accordion").classList.add("ng-hide") }, o.ConsultaAccionesAyuda = function () { o.post("/PlanesDeAccion/GetAccionesAyuda/?", modelNuevaAccion, function (e) { e.Correct && [].forEach.call(e.Objects, function (e) { $("#merge-acciones-ayuda").append("<span>" + e.Descripcion + "</span>") }) }) }, o.ConsultaAccionesGuardadas = function () { o.post("/PlanesDeAccion/GetAcciones/?", modelNuevaAccion, function (e) { e.Correct ? ($("#accordion .card-body").empty(), console.log(e.Objects), AccionesPreGuardadas = e.Objects, IdEncuesta > 0 ? ([].forEach.call(e.Objects, function (e) { $("#merge-new-acciones-idcat-" + e.Categoria.IdCategoria).append('\n                                <div class="form-group ng-scope" idAccion="' + e.IdAccionDeMejora + '">\n                                    <div class="form-inline">\n                                        <div class="col-8">\n                                            <button class="btn btn-sm re-asignar-accion"><i class="fas fa-sync-alt"></i></button>\n                                            <input disabled value="' + e.Descripcion + '" type="text" class="form-control is-valid" style="width: 95%;" placeholder="Acción de mejora">\n                                        </div>\n                                        <div class="col-3">\n                                            <select disabled class="form-control select-rango is-valid" style="width: 100%;"></select>\n                                        </div>\n                                        <div class="col-1" style="display:block ruby;padding: 0;">\n                                            <button class="btn edit-accion" onclick="editAccion(this);"><i class="fas fa-edit"></i></button>\n                                            <button class="btn delete-accion"><i class="fas fa-trash"></i></button>\n                                            <button class="btn save-action" onclick="GuardarAccion(this)"><i class="fas fa-save" style="color: #28a745;"></i></button>\n                                        </div>\n                                    </div>\n                                </div>\n                                '), $(".delete-accion").unbind(), $("#merge-new-acciones-idcat-" + e.Categoria.IdCategoria + " .delete-accion").click(function (e) { o.EliminarAccion(e) }) }), setTimeout(function () { var a, t;[].forEach.call(e.Objects, function (e, n) { a != e.Categoria.IdCategoria && (t = 0), a = e.Categoria.IdCategoria; var c = document.getElementById("merge-new-acciones-idcat-" + e.Categoria.IdCategoria), i = c.getElementsByTagName("select")[t];[].forEach.call(o.ListRangos, function (e) { i.options.add(new Option(e.Descripcion, e.Id, !1, !1)) }), i.value = e.Rango.IdRango, t++ }), o.AgregarAccionesDefault(), $(".re-asignar-accion").click(function (e) { IdAccion_ReAsignar = e.target.closest(".form-group").attributes.IdAccion.value, $("#re-asignar-accion").modal("toggle") }) }, 500)) : CrearGridSubCategorias()) : swal("Ocurrió un error al intentar consultar las acciones guardadas", e.ErrorMessage, "error") }) }, o.ReAsignarAccion = function () { if (0 != IdAccion_ReAsignar) return "0" == document.getElementById("nueva-categoria").value || "0" == document.getElementById("nuevo-rango").value ? (SetCampoInvalido(document.getElementById("nueva-categoria")), SetCampoInvalido(document.getElementById("nuevo-rango")), void swal("Debes elegir la nueva categoria y el nuevo rango", "", "info").then(function () { })) : void o.get("/PlanesDeAccion/ReAsignar/?IdAccion=" + IdAccion_ReAsignar + "&IdCategoria=" + document.getElementById("nueva-categoria").value + "&IdRango=" + document.getElementById("nuevo-rango").value, function (e) { e.Correct ? swal("La acción de mejora ha sido re asignada exitosamente", "", "success").then(function () { LimpiarModal(), o.ConsultaAccionesGuardadas() }) : swal("Ocurrió un error al intentar re asignar la acción", "", "error").then(function () { LimpiarModal() }) }); swal("Debes elegir la acción a re asignar", "", "info").then(function () { }) }, o.AgregarAccionesDefault = function () { [].forEach.call(document.getElementById("accordion").children, function (e) { var a = !1; if (0 == e.getElementsByClassName("form-group").length) { a = !0; for (var t = 0; t < 1; t++)e.getElementsByClassName("card-body")[0].innerHTML += '<div class="form-group">\n                        <div class="form-inline">\n                            <div class="col-8">\n                                <input type="text" class="form-control" style="width: 95%;" placeholder="Acción de mejora">\n                            </div>\n                            <div class="col-3">\n                                <select class="form-control select-rango" style="width: 100%;"></select>\n                            </div>\n                            <div class="col-1">\n                                <button class="btn delete-accion"><i class="fas fa-trash"></i></button>\n                                <button class="btn save-action" onclick="GuardarAccion(this)"><i class="fas fa-save"></i></button>\n                            </div>\n                        </div>\n                    </div>'; 1 == a && ([].forEach.call(e.getElementsByTagName("select"), function (e) { 0 == e.options.length && [].forEach.call(o.ListRangos, function (a) { e.options.add(new Option(a.Descripcion, a.Id, !1, !1)) }) }), $(".delete-accion").unbind(), $(".delete-accion").click(function (e) { o.EliminarAccion(e) })) } }) }, o.GenerarArbol = function () { var e, a, t, n, c, i = []; return [].forEach.call(o.EstructuraAFM, function (i) { switch ("UNeg=>" == i.type && (e = "UNEG_" + i.value + o.getUid()), "Comp=>" == i.type && (a = "Comp_" + i.value + o.getUid()), "Area=>" == i.type && (t = "Area_" + i.value + o.getUid()), "Dpto=>" == i.type && (n = "Depto_" + i.value + o.getUid()), "SubD=>" == i.type && (c = "Subd_" + i.value + o.getUid()), i.type) { case "UNeg=>": i.IdUnidadNegocio = e; break; case "Comp=>": i.IdUnidadNegocio = e, i.CompanyId = a; break; case "Area=>": i.IdUnidadNegocio = e, i.CompanyId = a, i.IdArea = t; break; case "Dpto=>": i.IdUnidadNegocio = e, i.CompanyId = a, i.IdArea = t, i.IdDepartamento = n; break; case "SubD=>": i.IdUnidadNegocio = e, i.CompanyId = a, i.IdArea = t, i.IdDepartamento = n, i.IdSubdepartamento = c } }), [].forEach.call(o.EstructuraAFM, function (e, a) { i.push({ text: e.value, checked: !1, id: a, children: [] }); var t = Enumerable.from(o.EstructuraAFM).where(a => "Comp=>" == a.type && a.IdUnidadNegocio == e.IdUnidadNegocio).toList();[].forEach.call(t, function (e, t) { i[a].children.push({ text: e.value, checked: !1, id: 0, children: [] }); var n = Enumerable.from(o.EstructuraAFM).where(a => "Area=>" == a.type && a.CompanyId == e.CompanyId).toList();[].forEach.call(n, function (e) { i[a].children[t].children.push({ text: e.value, checked: !1, id: 0, children: [] }) }) }) }), i }, o.getUid = function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var a = 16 * Math.random() | 0, o = "x" == e ? a : 3 & a | 8; return o.toString(16) }) }, o.get = function (a, o, n) { e.get(a, { headers: { "Cache-Control": "no-cache" } }).then(function (e) { try { if (t(e)) return; o(e.data) } catch (e) { t(e) } }, function (e) { t(e) }).finally(function () { }) }, o.post = function (a, o, n, c) { e.post(a, o).then(function (e) { try { if (t(e)) return; n(e.data) } catch (e) { t(e) } }, function (e) { t(e) }).finally(function () { }) }, IdEncuesta > 0 && o.post("/PlanesDeAccion/GetSubCategoriasByIdEncuesta/", model, function (e) { e.Correct ? (o.PromedioSubCategorias = JSON.parse(e.Objects[0].JsonData), o.CategoriasAgrupadas = o.AgruparCategorias(o.PromedioSubCategorias), o.Categorias = o.Execute(o.CategoriasAgrupadas), [].forEach.call(o.Categorias, function (e) { e.PromedioGeneral = Math.round(100 * e.PromedioGeneral) / 100 }), [].forEach.call(o.Categorias, function (e) { $("#nueva-categoria").append("<option value='" + e.IdCategoria + "'>" + e.Categoria + "</option>") }), o.ObtenerRangos()) : swal("Ocurrió un error al intentar consultar las subcategorias", e.ErrorMessage, "error") }), o.setIconoSVG = function (e) { try { if ((e = parseFloat(e)) < 70) return o.lluviaIcono; if (e >= 70 && e < 80) return o.nubeIcono; if (e >= 80 && e < 90) return o.solNubeIcono; if (e >= 90 && e <= 100) return o.solIcono } catch (e) { return "" } }, o.ObtenerRangos = function () { o.get("/PlanesDeAccion/GetRangos/", function (e) { e.Correct ? (o.ListRangos = [], [].forEach.call(e.Objects, function (e) { o.ListRangos.push({ Id: e.IdRango, Descripcion: e.Descripcion }) }), o.ListRangos.unshift({ Id: 0, Descripcion: "- Asignar rango -" }), setTimeout(function () { [].forEach.call(o.ListRangos, function (e) { $(".select-rango").append("<option value='" + e.Id + "'>" + e.Descripcion + "</option>") }), $(".delete-accion").unbind(), $(".delete-accion").click(function (e) { o.EliminarAccion(e) }) }, 500)) : swal("Ocurrió un error al consultar los rangos", e.ErrorMessage, "error") }) }, o.AgruparCategorias = function (e) { var a = Enumerable.from(e).distinct(e => e.IdPadre).toList(); return [].forEach.call(a, function (a) { var t = Enumerable.from(e).where(e => e.IdPadre == a.IdPadre).toList(); o.CategoriasAgrupadas.push(t) }), o.CategoriasAgrupadas }, o.Execute = function (e) { var a = Array(); return [].forEach.call(e, function (e) { var o = 0;[].forEach.call(e, function (e) { o += e.Promedio }), a.push({ IdCategoria: e[0].IdPadre, Categoria: e[0].NombrePadreCategoria, PromedioGeneral: o / e.length }) }), a }, o.GuardarPlanDeAccion = function () { o.get("/PlanesDeAccion/AddPlan/?Nombre=" + document.getElementById("NombrePlanAccion").value, function (e) { e.Correct ? (o.PlanDeAccion.Id = e.NewId, swal("El plan de acción se agregó correctamente", "", "success").then(function () { document.getElementById("accordion").classList.remove("ng-hide") })) : swal("Ocurrió un error al intentar guardar el plan de acción", e.ErrorMessage, "error") }) }, o.AgregarNuevaAccion = function (e) { $("#merge-new-acciones-idcat-" + e).append(NuevaAccionHtmlContent), [].forEach.call($("#merge-new-acciones-idcat-" + e + " .select-rango"), function (e) { 0 == e.options.length && [].forEach.call(o.ListRangos, function (a) { e.options.add(new Option(a.Descripcion, a.Id, !1, !1)) }) }), $(".delete-accion").unbind(), $(".delete-accion").click(function (e) { o.EliminarAccion(e) }) }, o.GuardarAccion = function (e) { var a = e.target.closest(".form-group").getElementsByTagName("input")[0].value, t = e.target.closest(".form-group").getElementsByTagName("select")[0].value, n = e.target.closest(".card-body").attributes.idCategoria.value; if (IsNullOrEmpty(a) || "0" == t) return swal("Debes describir la acción de mejora y asignarle un rango", "", "info").then(function () { return !1 }), SetCampoInvalido(e.target.closest(".form-group").getElementsByTagName("input")[0]), SetCampoInvalido(e.target.closest(".form-group").getElementsByTagName("select")[0]), !1; SetCampoValido(e.target.closest(".form-group").getElementsByTagName("input")[0]), SetCampoValido(e.target.closest(".form-group").getElementsByTagName("select")[0]); var c = null == e.target.closest(".form-group").attributes.IdAccion ? 0 : e.target.closest(".form-group").attributes.IdAccion.value; modelNuevaAccion = { Descripcion: a, Rango: { IdRango: t }, Estatus: { IdEstatus: 1 }, Categoria: { IdCategoria: n }, Encuesta: { IdEncuesta: IdEncuesta }, BasesDeDatos: { IdBaseDeDatos: IdBaseDeDatos }, AnioAplicacion: AnioAplicacion, IdAccionDeMejora: c }, o.post("/PlanesDeAccion/AddAccion/", modelNuevaAccion, function (a) { a.Correct ? (e.target.closest(".form-group").getElementsByClassName("fas fa-save")[0].style.color = "#28a745", e.target.closest(".form-group").setAttribute("IdAccion", a.NewId), 0 == c && swal("La acción ha sido agregada con éxito", "", "success"), c > 0 && swal("La acción ha sido actualizada con éxito", "", "success"), e.target.closest(".form-group").getElementsByTagName("input")[0].setAttribute("disabled", ""), e.target.closest(".form-group").getElementsByTagName("select")[0].setAttribute("disabled", "")) : (0 == c && swal("Ocurrió un error al intentar guardar la acción", a.ErrorMessage, "error"), c > 0 && swal("Ocurrió un error al intentar actualizar la acción", a.ErrorMessage, "error")) }) }, o.EliminarAccion = function (e) { var a = e.target.closest(".form-group"); null == a.attributes.IdAccion ? swal({ title: "¿Estás seguro de que deseas eliminar la acción de mejora?", text: "", icon: "info", buttons: ["No", "Si"], dangerMode: !1, allowOutsideClick: !1, closeOnClickOutside: !1 }).then(function (a) { a && e.target.closest(".form-group").remove() }) : a.attributes.IdAccion.value > 0 && o.get("/PlanesDeAccion/DeleteAccion/?IdAccion=" + a.attributes.IdAccion.value, function (a) { a.Correct ? swal("La acción ha sido eliminada con éxito", "", "success").then(function () { e.target.closest(".form-group").remove() }) : swal("Ocurrió un error al intentar eliminar la acción", a.ErrorMessage, "error") }) }, o.GuardaAccionAyuda = function (e) { console.log(e); var a = e.target.closest("#edita-acciones").getElementsByTagName("input")[0].value, t = e.target.closest("#edita-acciones").getElementsByTagName("input")[1].value; if ("" == t) return swal("Debes describir la acción de mejora", "", "info").then(function () { return !1 }), !1; modelNuevaAccion = { Descripcion: t, Estatus: { IdEstatus: 1 }, Encuesta: { IdEncuesta: 0 }, BasesDeDatos: { IdBaseDeDatos: 0 }, AnioAplicacion: 0, IdAccionDeMejora: a }, o.post("/PlanesDeAccion/AddAccion/", modelNuevaAccion, function (e) { e.Correct ? (0 != a && "" != a || swal("La acción ha sido agregada con éxito", "", "success").then(function () { o.ConsultaAccionesGuardadas() }), a > 0 && swal("La acción ha sido actualizada con éxito", "", "success").then(function () { o.ConsultaAccionesGuardadas() }), LimpiarModal()) : (0 == a && swal("Ocurrió un error al intentar guardar la acción", e.ErrorMessage, "error"), a > 0 && swal("Ocurrió un error al intentar actualizar la acción", e.ErrorMessage, "error")) }) } } catch (e) { alert(e.message) } }) }(); var NuevaAccionHtmlContent = '<div class="form-group">\n        <div class="form-inline">\n            <div class="col-8">\n                <input type="text" class="form-control" style="width: 100%;" placeholder="Acción de mejora" />\n            </div>\n            <div class="col-3">\n                <select class="form-control select-rango" style="width: 100%;"></select>\n            </div>\n            <div class="col-1">\n                <button class="btn delete-accion"><i class="fas fa-remove"></i></button>\n                <button class="btn save-action" onclick="GuardarAccion(this)"><i class="fas fa-save"></i></button>\n            </div>\n        </div>\n    </div>', GuardarAccion = function (e) { var a = e.closest(".form-group").getElementsByTagName("input")[0].value, o = e.closest(".form-group").getElementsByTagName("select")[0].value, t = e.closest(".card-body").attributes.idCategoria.value; if (IsNullOrEmpty(a) || "0" == o) return swal("Debes describir la acción de mejora y asignarle un rango", "", "info").then(function () { return !1 }), SetCampoInvalido(e.closest(".form-group").getElementsByTagName("input")[0]), SetCampoInvalido(e.closest(".form-group").getElementsByTagName("select")[0]), !1; SetCampoValido(e.closest(".form-group").getElementsByTagName("input")[0]), SetCampoValido(e.closest(".form-group").getElementsByTagName("select")[0]); var n = null == e.closest(".form-group").attributes.IdAccion ? 0 : e.closest(".form-group").attributes.IdAccion.value; modelNuevaAccion = { Descripcion: a, Rango: { IdRango: o }, Estatus: { IdEstatus: 1 }, Categoria: { IdCategoria: t }, Encuesta: { IdEncuesta: IdEncuesta }, BasesDeDatos: { IdBaseDeDatos: IdBaseDeDatos }, AnioAplicacion: AnioAplicacion, IdAccionDeMejora: n }, $.ajax({ url: "/PlanesDeAccion/AddAccion/", type: "POST", data: modelNuevaAccion, success: function (a) { a.Correct ? (e.closest(".form-group").getElementsByClassName("fas fa-save")[0].style.color = "#28a745", e.closest(".form-group").setAttribute("IdAccion", a.NewId), 0 == n && swal("La acción ha sido agregada con éxito", "", "success"), n > 0 && swal("La acción ha sido actualizada con éxito", "", "success"), e.closest(".form-group").getElementsByTagName("input")[0].setAttribute("disabled", ""), e.closest(".form-group").getElementsByTagName("select")[0].setAttribute("disabled", "")) : (0 == n && swal("Ocurrió un error al intentar guardar la acción", a.ErrorMessage, "error"), n > 0 && swal("Ocurrió un error al intentar actualizar la acción", a.ErrorMessage, "error")) }, error: function (e) { 404 == e.status ? alert("404 - Recurso no encontrado") : alert(e.status) } }) }, IsNullOrEmpty = function (e) { var a = !1; switch (null != e && null != e || (a = !0), typeof e) { case "string": "" == e && (a = !0); break; case "object": 0 == e.length && (a = !0) }return a }, SetCampoInvalido = function (e) { e.classList.remove("is-valid"), e.classList.add("is-invalid") }, SetCampoValido = function (e) { e.classList.remove("is-invalid"), e.classList.add("is-valid") }, BuscaAcciones = function (e) { $("*:contains(" + e + ")").each(function () { $(this).children().length < 1 && $(this).css("border", "solid 2px red") }) }, CrearScript = function (e) { var a = document.createElement("script"); a.src = e, document.head.appendChild(a) }, CrearGridSubCategorias = function () { setTimeout(function () { 0 == AccionesPreGuardadas.length ? swal("No se encontrarón acciones guardadas", "", "info") : $("#grid-Acciones").kendoGrid({ dataSource: AccionesPreGuardadas, columnMenu: { filterable: !1 }, height: 500, editable: "", pageable: !0, sortable: !0, navigatable: !0, resizable: !0, reorderable: !0, columns: [{ field: "IdAccionDeMejora", title: "IdAccionDeMejora", width: 50, editable: !1 }, { field: "Descripcion", title: "Descripcion", width: 150 }, { field: "Editar", title: "Editar", width: 80, template: "<button class='btn btn-info' onclick='EditAccionAyuda(this)'>Editar</button>" }], batch: !0, pageSize: 20, autoSync: !0, schema: { model: { id: "IdAccionDeMejora", fields: { IdAccionDeMejora: { editable: !1 }, Descripcion: { type: "", editable: !0 }, IdCategoria: { type: "button", editable: !0 } } } } }) }, 500) }, LimpiarModal = function () { IdEncuesta > 0 && ($("#re-asignar-accion").modal("toggle"), $("#nueva-categoria").val("0"), $("#nuevo-rango").val("0")), 0 == IdEncuesta && ($("#edita-acciones").modal("toggle"), $("#edita-acciones input")[0].value = "", $("#edita-acciones input")[1].value = "") }, editAccion = function (e) { console.log(e), e.closest(".form-group").getElementsByTagName("input")[0].removeAttribute("disabled"), e.closest(".form-group").getElementsByTagName("select")[0].removeAttribute("disabled") }, EditAccionAyuda = function (e, a) { if (console.log(e), $("#edita-acciones .select-rango").empty(), [].forEach.call(listRangos, function (e) { $("#edita-acciones .select-rango").append("<option>" + e.Descripcion + "</option>") }), "nueva-accion" == e.id) $("#edita-acciones").modal("toggle"); else { var o = e.closest(".k-master-row").getElementsByTagName("td")[0].innerText, t = e.closest(".k-master-row").getElementsByTagName("td")[1].innerText; $("#edita-acciones").modal("toggle"), $("#edita-acciones input")[0].value = o, $("#edita-acciones input")[1].value = t } $("#edita-acciones .header-modal")[0].innerText = "agregar" == a ? "Agregar nueva acción" : "Editar acción" };
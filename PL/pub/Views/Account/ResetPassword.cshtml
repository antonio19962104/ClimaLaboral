@model ML.Administrador
@{
    ViewBag.Title = "¿Olvidó la contraseña?";
    Layout = null;
}
<!DOCTYPE html>
<html lang="es-es">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Restablecer contraseña</title>
    @Styles.Render("~/bundles/cssAdmin")
    @{
        //Session["PerfilAdminLog"]
        ViewBag.Perfil = Session["PerfilAdminLog"];
    }
</head>
<body>
    <main id="wrapper">
        <div id="top-bar">
            <div class="container-fluid px-lg-5">
                <div class="row">
                    <div class="col-4 col-sm-5 col-md-5">
                        <img src="~/img/logo.png" class="logo-header" alt="Logo" onclick="">
                    </div>

                    <div class="col-8 col-sm-7 col-md-7">
                        <div class="user-info">
                            <span class="color">Hola</span>, Bienvenido a la recuperación de contraseña
                            <img src="~/img/icon-user-male.jpg" class="avatar-header" width="50" height="50" alt="Avatar">
                        </div><!--.user-info-->
                    </div>
                </div><!--.row-->
            </div><!--.container-fluid-->
        </div>
        <section id="content">
            <div class="content-wrap">
                <div class="container-fluid px-lg-5">
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="col-md-12 col-sm-12 col-xs-12 col-12">
                                @using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form", @autocomplete = "off" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <h4>Restablezca la contraseña.</h4>
                                    <h5>La contraseña debe tener entre 8 y 16 caracteres, al menos un dígito, al menos una minúscula, al menos una mayúscula y al menos un caracter no alfanumérico.</h5>
                                    <hr />
                                    @Html.ValidationSummary("", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Code)
                                    @Html.HiddenFor(model => model.Correo)
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.UserName, new { @class = "col-md-2 control-label" })
                                        <div class="col-md-6">
                                            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", @autocomplete = "off", @onkeyup = "validarRealTime(this)" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Escribe tu nueva contraseña", new { @class = "col-md-2 control-label" })
                                        <div class="col-md-6">
                                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", @onkeyup = "validateSintaxPassword();", @id = "Pass1", @autocomplete = "off" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Confirma tu nueva contraseña", new { @class = "col-md-2 control-label" })
                                        <div class="col-md-6">
                                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", @onkeyup = "validarPassword();", @id = "Pass2", autocomplete = "off" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" class="btn btn-success" value="Restablecer" />
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
    <footer id="footer">
        <div class="container-fluid px-lg-5">
            <div class="row">
                <div class="col-6">
                    <p class="copyrights"><span class="color">DIAGNOSTIC 4U</span> @DateTime.Now.Year</p>
                </div>
                <div class="col-6">
                    <p class="text-support"><i class="far fa-life-ring"></i> SOPORTE</p>
                </div>
            </div>
        </div>
    </footer>
</body>
</html>
<script src="~/scripts/jquery-3.4.1.min.js"></script>
<script>
    var validaEmail = false;
    var validaPass = false;
    var validaSintaxPass = false;
    function validarRealTime(e) {
        var regExpEmail = /^(([^<>()[\]\.,;:\s@@\"]+(\.[^<>()[\]\.,;:\s@@\"]+)*)|(\".+\"))@@(([^<>()[\]\.,;:\s@@\"]+\.)+[^<>()[\]\.,;:\s@@\"]{2,})$/i;

        var idItem = '#' + e.id;
        var classSpan = e.id;
        var texto = $(idItem).val();
        var PadreDiv = e.parentNode;

        if (e.id == "UserName") {
            if (!regExpEmail.test(texto)) {
                $('.' + classSpan).remove();
                $(PadreDiv).append('<span class="' + classSpan + ' error" style="color:red">Por favor ingrese un correo válido</span>');
                $(':input[type="submit"]').prop('disabled', true);
                validaEmail = false;
            } else {
                $('#Correo').val(texto);
                $('.' + classSpan).remove();
                validaEmail = true;
                validarBoton();
            }
        }
    }
    function validarPassword() {
        var psw1 = $('#Pass1').val();
        var psw2 = $('#Pass2').val();
        var parent = $('#Pass2').parent();
        if (psw1 != psw2) {
            console.log('No coinciden');
            $('#noMatch').remove();
            $(parent).append('<span id="noMatch" style="color:red">Las contraseñas no coinciden</span>');
            event.preventDefault();
            $(':input[type="submit"]').prop('disabled', true);
            validaPass = false;
        }
        else {
            $('#noMatch').remove();
            validaPass = true;
            validarBoton();
        }
    }
    function validateSintaxPassword() {
        var psw1 = $('#Pass1').val();
        var padre = $('#Pass1').parent();
        //var regExp = /^(?=.*\d)(?=.*[\u0021-\u002b\u003c-\u0040])(?=.*[A-Z])(?=.*[a-z])\S{8,16}$/;
        var regExp = /^(?=.*\d)(?=)(?=.*[A-Z])(?=.*[a-z])\S{8,16}$/;
        if (!regExp.test(psw1)) {
            $('#noSintax').remove();
            $(padre).append('<span id="noSintax" style="color:red">La contraseña no coincide con el formato solicitado</span>');
            $(':input[type="submit"]').prop('disabled', true);
            validaSintaxPass = false;
        }
        else {
            $('#noSintax').remove();
            validaSintaxPass = true;
            validarBoton();
        }
    }
    function validarBoton() {
        var psw1 = $('#Pass1').val();
        var psw2 = $('#Pass2').val();
        if (validaEmail == true && validaPass == true && validaSintaxPass == true && psw1 == psw2) {
            $(':input[type="submit"]').prop('disabled', false);
        }
        else {
            $(':input[type="submit"]').prop('disabled', true);
        }
    }
    $(document).ready(function () {
        validaEmail = false;
        validaPass = false;
        validaSintaxPass = false;
    });
</script>